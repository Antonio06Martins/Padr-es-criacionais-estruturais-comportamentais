- Decorator
* O Decorator é um padrão de projeto estrutural que permite que você acople novos comportamentos para objetos
  ao colocá-los dentro de invólucros de objetos que contém os comportamentos.
* Utilize o padrão Decorator quando você precisa ser capaz de projetar comportamentos adicionais para objetos
  em tempo de execução sem quebrar o código que usa esses objetos.
* Utilize o padrão quando é complicado ou impossível estender o comportamento de um objeto usando herança.
* Você pode estender o comportamento de um objeto sem fazer um nova subclasse.
* Princípio de responsabilidade única. Você pode dividir uma classe monolítica que implementa muitas possíveis
  variantes de um comportamento em diversas classes menores.
* Você pode adicionar ou remover responsabilidades de um objeto no momento da execução.
* Esse padrão cria uma classe decoradora que envolve a classe original e fornece funcionalidade adicional,
  mantendo a assinatura dos métodos da classe intacta.

- Passo a Passo

1° - Primeiro, vamos criar uma interface ArvoreNatal e sua implementação
2° - Agora vamos criar uma classe abstrata ArvoreDecorator para esta árvore. Este decorador implementará a interface
     ArvoreNatal e também manterá o mesmo objeto. O método implementado da mesma interface simplesmente chamará
     o método decorando() da nossa interface.
3° - Vamos agora criar algum elemento de decoração. Esses decoradores estenderão nossa classe abstrata ArvoreDecorator e
     modificarão seu método decorando() de acordo com nossos requisitos.
4° -
